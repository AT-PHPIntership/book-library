<?php

namespace Tests\Feature;

use DB;
use Tests\TestCase;
use App\Model\Book;
use App\Model\Donator;
use App\Model\Category;
use Faker\Factory as Faker;
use Illuminate\Http\Response;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class FilterListBookApiTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * This function is called before testcase
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->makeData();
    }

    /**
     * @dataProvider transferFilterURL
     * 
     */
    public function testFilterFollowOneParam($param, $key)
    {
        $uriExist = $key . '=' . $param[0];
        $uriNotExist = $key . '=' . $param[1];

        // exist category_id
        $response = $this->get('/api/books?'. $uriExist)
            ->assertJsonStructure($this->jsonStructureListBooksExists())
            ->assertStatus(Response::HTTP_OK);

        // not exist category_id    
        $response = $this->get('/api/books?'. $uriNotExist)
            ->assertJsonStructure($this->jsonStructureListBooksNotExists())
            ->assertStatus(Response::HTTP_OK);

    }

    /**
     * Test result pagination.
     *
     * @return void
     */
    public function testFilterFollowManyParams()
    {
        // exist category_id
        $response = $this->get('/api/books?category=1&language=an&search=a')
            ->assertJsonStructure($this->jsonStructureListBooksExists())
            ->assertStatus(Response::HTTP_OK);

        // not exist category_id    
        $response = $this->get('/api/books?category=2&language=an&search=a')
            ->assertJsonStructure($this->jsonStructureListBooksNotExists())
            ->assertStatus(Response::HTTP_OK);
    }

    /**
     *  Test case
     * 
     * @return array
     */
    public function transferFilterURL() {
        return [
            [['1', '2'], 'category'],
            [['an', 'na'], 'language'],
        ];
    }

    /**
     * Return json structure of list books if keywords exist
     *
     * @return array
     */
    public function jsonStructureListBooksExists()
    {
        return [
            "meta" => [
                "message",
                "code"
            ],
            "current_page",
            "data" => [
                [
                    "id",
                    "name",
                    "author",
                    "image",
                    "avg_rating"
                ]
            ],
            "first_page_url",
            "from",
            "last_page",
            "last_page_url",
            "next_page_url",
            "path",
            "per_page",
            "prev_page_url",
            "to",
            "total"
        ];
    }

    /**
     * Return json structure of list books if keywords !exist
     *
     * @return array
     */
    public function jsonStructureListBooksNotExists()
    {
        return [
            "meta" => [
                "message",
                "code"
            ],
            "current_page",
            "data" => [],
            "first_page_url",
            "from",
            "last_page",
            "last_page_url",
            "next_page_url",
            "path",
            "per_page",
            "prev_page_url",
            "to",
            "total"
        ];
    }

    /**
     * Create data
     * 
     * @return void
     */
    public function makeData()
    {
        $faker = Faker::create();
        factory(Category::class, 1)->create();
        factory(Donator::class, 1)->create();
        factory(Book::class, 1)->create([
            'category_id' => 1,
            'donator_id' => 1,
            'language' => 'an',
            'name' => 'abc'
        ]);
    }
}
